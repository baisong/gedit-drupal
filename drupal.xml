<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="drupal.xslt"?>
<snippets language="drupal">
  <!-- Common php pattern -->
  <snippet id="array">
    <text><![CDATA[array('${1:key}' => '${2:$value}');]]></text>
    <tag>array</tag>
    <description>array</description>
  </snippet>
  <snippet id="while">
    <text><![CDATA[while (${1:$a} <= ${2:10}) {
  ${0:# code...}
}]]></text>
    <tag>while</tag>
    <description>while</description>
  </snippet>
  <snippet id="case">
    <text><![CDATA[case '${1:variable}':
  ${0:# code...}
  break;]]></text>
    <tag>case</tag>
    <description>case ..</description>
  </snippet>
  <snippet id="for">
    <text><![CDATA[for (${1:$i} = ${2:0}; ${1} < ${3:10}; ${1}++) {
  ${0:# code...}
}]]></text>
    <tag>for</tag>
    <description>for ..</description>
  </snippet>
  <snippet id="foreach">
    <text><![CDATA[foreach (${1:$variable} as ${2:$key} => ${3:$value}) {
  ${0:# code...}
}]]></text>
    <tag>foreach</tag>
    <description>foreach ..</description>
  </snippet>
  <snippet id="do-while">
    <text><![CDATA[do {
  ${0:# code...}
} while (${1:$a <= 10});]]></text>
    <tag>do</tag>
    <description>do .. while ..</description>
  </snippet>
  <snippet id="if">
    <text><![CDATA[if (${1:condition}) {
  ${0:# code...}
}]]></text>
    <tag>if</tag>
    <description>if ..</description>
  </snippet>
  <snippet id="ifelse">
    <text><![CDATA[if (${1:condition}) {
  ${2:# code...}
}
else {
  ${3:# code...}
}
${0:# code...}]]></text>
    <tag>ifelse</tag>
    <description>if .. else ..</description>
  </snippet>
  <snippet id="else">
    <text><![CDATA[else {
  ${0:# code...}
}]]></text>
    <tag>else</tag>
    <description>else ..</description>
  </snippet>
  <snippet id="elseif">
    <text><![CDATA[elseif (${1:condition}) {
  ${0:# code...}  
}]]></text>
    <tag>elseif</tag>
    <description>elseif ..</description>
  </snippet>
  <snippet id="switch">
    <text><![CDATA[switch (${1:variable}) {
  case '${2:value}':
    ${3:# code...}
    break;
    
  default:
    ${0:# code...}
    break;
}]]></text>
    <tag>switch</tag>
    <description>switch ..</description>
  </snippet>
  <snippet id="function">
    <text><![CDATA[$<
# Define global variable
global strparam

####### Function params ##########
strparam = ''
params = $3.split(',')
# Generate documentation array
for par in params:
  strparam = strparam + ' * @param ' + par.strip() + '\n *   Description of param ' + par.strip() + '\n'
>/** ${10:Short description of this function}.
 *
 * ${11:Long description of this function.}
 *
 * Example usage:
 * @code
 *  ${12:my_print('Function usage sample');}
 * @endcode
 * 
$<[3]: return strparam
> *
 * @return
 *   ${15:Description of return value}
 */
function _${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_${2:function_name}(${3:$param1, $param2, $param3}) {
  ${0:#code}
}]]></text>
    <tag>function</tag>
    <description>function()</description>
  </snippet>


  <!-- Files element -->
  <snippet id="file-check">
    <text><![CDATA[check_file(${1:$filename})]]></text>
    <tag>file</tag>
    <description>check_file()</description>
  </snippet>
  <snippet id="file-copy">
    <text><![CDATA[file_copy(${1:&$source}, ${2:$dest}, ${3:[FILE_EXISTS_REPLACE,FILE_EXISTS_RENAME,FILE_EXISTS_ERROR]});]]></text>
    <tag>file</tag>
    <description>file_copy()</description>
  </snippet>
  <snippet id="file-delete">
    <text><![CDATA[file_delete(${1:&$source});]]></text>
    <tag>file</tag>
    <description>file_delete()</description>
  </snippet>
  <snippet id="file-destination">
    <text><![CDATA[file_destination(${1:$destination}, ${2:[FILE_EXISTS_REPLACE,FILE_EXISTS_RENAME,FILE_EXISTS_ERROR]});]]></text>
    <tag>file</tag>
    <description>file_destination()</description>
  </snippet>
  <snippet id="file-move">
    <text><![CDATA[file_move(${1:&$source}, ${2:$dest}, ${3:[FILE_EXISTS_REPLACE,FILE_EXISTS_RENAME,FILE_EXISTS_ERROR]});]]></text>
    <tag>file</tag>
    <description>file_move()</description>
  </snippet>
  <snippet id="file-save-upload">
    <text><![CDATA[file_save_upload(${1:$source}, ${2:$validators}, ${3:$dest}, ${3:[FILE_EXISTS_REPLACE,FILE_EXISTS_RENAME,FILE_EXISTS_ERROR]})]]></text>
    <tag>file</tag>
    <description>file_save_upload()</description>
  </snippet>

  <!-- Database -->
  <snippet id="db-fetch-array">
    <text><![CDATA[db_fetch_array(${1:$result});]]></text>
    <tag>db</tag>
    <description>db_fetch_array()</description>
  </snippet>
  <snippet id="db-fetch-object">
    <text><![CDATA[db_fetch_object(${1:$result});]]></text>
    <tag>db</tag>
    <description>db_fetch_object()</description>
  </snippet>
  <snippet id="db-query">
    <text><![CDATA[$results = db_query("${0}");]]></text>
    <tag>db</tag>
    <description>db_query()</description>
  </snippet>
  <snippet id="db-query-range">
    <text><![CDATA[db_query_range(${1:''}, ${2:$from}, ${4:$count});]]></text>
    <tag>db</tag>
    <description>db_query_range()</description>
  </snippet>
  <snippet id="db-set-active">
    <text><![CDATA[db_set_active('${1:default}');]]></text>
    <tag>db</tag>
    <description>db_set_active()</description>
  </snippet>
  <snippet id="drupal-write-record">
    <text><![CDATA[drupal_write_record('${1:table}', ${2:$object}, array('${3:update_key}'));]]></text>
    <tag>db</tag>
    <description>drupal_write_record()</description>
  </snippet>

  <!-- Common -->
  <snippet id="l">
    <text><![CDATA[l(${1:$text}, ${2:$path}, array( 'attributes' => '${3}', 'query' => '${4}', 'fragment' => '${5}', 'absolute' => ${6:FALSE}, 'html' => ${7:FALSE},  'alias' => ${8:FALSE}));]]></text>
    <tag>l</tag>
    <description>l()</description>
  </snippet>
  <snippet id="drupal-get-path">
    <text><![CDATA[drupal_get_path('${1:[module,theme,theme_engine]}', '${2:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}');]]></text>
    <tag>drupal</tag>
    <description>drupal_get_path()</description>
  </snippet>
  <snippet id="drupal-set-message">
    <text><![CDATA[drupal_set_message(t("${1:message}"), '${2:[status,warning,error]}', ${3:$repeat});]]></text>
    <tag>drupal</tag>
    <description>drupal_set_message()</description>
  </snippet>
  <snippet id="watchdog">
    <text><![CDATA[watchdog('${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}', '${2:message}', ${3:$variables}, ${4:[WATCHDOG_DEBUG,WATCHDOG_INFO,WATCHDOG_NOTICE,WATCHDOG_WARNING,WATCHDOG_ERROR,WATCHDOG_ALERT,WATCHDOG_EMERG]}, '${5:link}')]]></text>
    <tag>watchdog</tag>
    <description>watchdog()</description>
  </snippet>

  <!-- Localization -->
  <snippet id="format-plural">
    <text><![CDATA[format_plural(${1:$count}, '${2:singular}', '${3:plural}', array('${4:@param}' => ${5:$value}), ${6:$langcode})]]></text>
    <tag>t</tag>
    <description>format_plural()</description>
  </snippet>
  <snippet id="t">
    <text><![CDATA[t('${1:string}', array('${2:@param}' => ${3:$value}), ${4:$langcode});]]></text>
    <tag>t</tag>
    <description>t()</description>
  </snippet>

  <!-- CSS -->
  <snippet id="drupal-add-css">
    <text><![CDATA[drupal_add_css(drupal_get_path('${1:[module,theme,theme_engine]}', '${2:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)} . '$(3:echo '/css/style.css')', '${4:[module,theme]}', '${5:[all,print,screen]}');]]></text>
    <tag>drupal</tag>
    <description>drupal_add_css()</description>
  </snippet>

  <!-- Javascript -->
  <snippet id="drupal-add-js-inline">
    <text><![CDATA[drupal_add_js('
if (Drupal.jsEnabled) {
  $(echo '$')(document).ready(function() {
    ${0:// Add code here}
  });
}', 'inline');  ]]></text>
    <tag>drupal</tag>
    <description>drupal_add_js( inline )</description>
  </snippet>
  <snippet id="drupal-add-js-module">
    <text><![CDATA[drupal_add_js(drupal_get_path('[module,theme,theme_engine]', '${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}').'$(1: echo '/js/script.js')');]]></text>
    <tag>drupal</tag>
    <description>drupal_add_js( module )</description>
  </snippet>
  <snippet id="drupal-add-js-settings">
    <text><![CDATA[drupal_add_js(array('${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}' => ${0:$settings}, 'setting');]]></text>
    <tag>drupal</tag>
    <description>drupal_add_js( settings )</description>
  </snippet>
  <snippet id="drupal-json">
    <text><![CDATA[drupal_json(${0:$var});]]></text>
    <tag>drupal</tag>
    <description>drupal_json()</description>
  </snippet>

  <!-- Form API elements -->
  <snippet id="fapi-button">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'button',
  '#value'         => t('${2:Title}'),
  '#weight'        => ${3:0},
);]]></text>
    <tag>fapi</tag>
    <description>FAPI button</description>
  </snippet>
  <snippet id="fapi-checkbox">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'checkbox',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#weight'        => ${4:0},
  '#required'      => ${5:[TRUE,FALSE]},
  '#default_value' => $(6:echo '$node->'${1}),
);]]></text>
    <tag>fapi</tag>
    <description>FAPI checkbox</description>
  </snippet>
  <snippet id="fapi-checkboxes">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'checkboxes',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#default_value' => ${4:array(TRUE, TRUE, FALSE)},
  '#options'       => ${5:array(
    'value1' => t('Description 1'),
    'value2' => t('Description 2'),
    'value3' => t('Description 3'),
  )},
  '#weight'        => ${6:0},
  '#required'      => ${7:[TRUE,FALSE]},
);]]></text>
    <tag>fapi</tag>
    <description>FAPI checkboxes</description>
  </snippet>
  <snippet id="fapi-date">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'date',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#default_value' => ${4:array(
    'year'  => format_date(time(), 'custom', 'Y'),
    'month' => format_date(time(), 'custom', 'n'),
    'day'   => format_date(time(), 'custom', 'j'),
  )},
  '#weight'        => ${6:0},
  '#required'      => ${7:[TRUE,FALSE]},
);
]]></text>
    <tag>fapi</tag>
    <description>FAPI date</description>
  </snippet>
  <snippet id="fapi-fieldset">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'fieldset',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#weight'        => ${4:0},
  '#collapsible'   => ${5:[TRUE,FALSE]},
  '#collapsed'     => ${6:[FALSE,TRUE]},
);]]></text>
    <tag>fapi</tag>
    <description>FAPI fieldset</description>
  </snippet>
  <snippet id="fapi-file">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'file',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#size'          => ${4:40},
  '#weight'        => ${5:0},
);
// NB: please add ===
$form['#attributes'] = array('enctype' => "multipart/form-data");
// ==================]]></text>
    <tag>fapi</tag>
    <description>FAPI file</description>
  </snippet>
  <snippet id="fapi-hidden">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'hidden',
  '#value'         => '${2:value}',
);]]></text>
    <tag>fapi</tag>
    <description>FAPI hidden</description>
  </snippet>
  <snippet id="fapi-markup">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'markup',
  '#value'         => '${2:value}',
  '#weight'        => ${4:0},
  '#prefix'        => '${3}',
  '#suffix'        => '${4}',
  '#attribute'     => '${5}',
);]]></text>
    <tag>fapi</tag>
    <description>FAPI markup</description>
  </snippet>
  <snippet id="fapi-password">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'password',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#weight'        => ${4:0},
  '#size'          => ${5:60},
  '#maxlength'     => ${6:128},
  '#required'      => ${7:[TRUE,FALSE]},
);]]></text>
    <tag>fapi</tag>
    <description>FAPI password</description>
  </snippet>
  <snippet id="fapi-radios">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'radios',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#weight'        => ${4:0},
  '#required'      => ${5:[TRUE,FALSE]},
  '#default_value' => $(6:echo '$node->'${1}),
  '#options'       => ${7:array(
    'value1' => t('Description 1'),
    'value2' => t('Description 2'),
    'value3' => t('Description 3'),
  )},
);]]></text>
    <tag>fapi</tag>
    <description>FAPI radios</description>
  </snippet>
  <snippet id="fapi-select">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'select',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#weight'        => ${4:0},
  '#required'      => ${5:[TRUE,FALSE]},
  '#default_value' => $(6:echo '$node->'${1}),
  '#options'       => ${7:array(
    'value1' => t('Description 1'),
    'value2' => t('Description 2'),
    'value3' => t('Description 3'),
  )},
);]]></text>
    <tag>fapi</tag>
    <description>FAPI select</description>
  </snippet>
  <snippet id="fapi-subimt">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'submit',
  '#value'         => t('${2:Submit}'),
  '#weight'        => ${4:0},
);]]></text>
    <tag>fapi</tag>
    <description>FAPI submit</description>
  </snippet>
  <snippet id="fapi-textarea">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'textarea',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#weight'        => ${4:0},
  '#required'      => ${5:[TRUE,FALSE]},
  '#default_value' => $(6:echo '$node->'${1}),
  '#maxlength'     => ${7:128},
);]]></text>
    <tag>fapi</tag>
    <description>FAPI textarea</description>
  </snippet>
  <snippet id="fapi-textfield">
    <text><![CDATA[$form['${1:name}'] = array(
  '#type'          => 'textfield',
  '#title'         => t('${2:Title}'),
  '#description'   => t('${3:Description}'),
  '#weight'        => ${4:0},
  '#required'      => ${5:[TRUE,FALSE]},
  '#default_value' => $(6:echo '$node->'${1}),
  '#maxlength'     => ${7:128},
);]]></text>
    <tag>fapi</tag>
    <description>FAPI textfield</description>
  </snippet>
  <snippet id="fapi-ahah">
    <text><![CDATA['#ahah' => array(
  'path'     => '${1:autocomplete/user}',
  'wrapper'  => '${2:div-replace}',
  'method'   => '${3:replace after append before prepend}',
  'event'    => '${4:click blur change}'
  'effect'   => '${5:none fade slide}',
  'progress' => array(
    'type'     => '${6:throbber bar}',
    'message'  => t("${7:Message}"),
    'url'      => '${8:path/to/progress}',
    'interval' => ${9:100},
  );
),]]></text>
    <tag>fapi</tag>
    <description>FAPI AHAH functionality</description>
  </snippet>

  <!-- Hooks -->
  <snippet id="hook-access">
    <text><![CDATA[
/**
 * Implementation of hook_access().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create ${2:my content type}', $account);
      break;
    case 'delete':
      if ((user_access('edit own ${2}', $account) && ($account->uid == $node->uid)) || (user_access('delete ${2}', $account)) {
        return TRUE;
      }
      else {
        return FALSE;
      }
      break;
    case 'update':
      if ((user_access('edit own ${2}', $account) && ($account->uid == $node->uid)) || (user_access('edit ${2}', $account)) {
        return TRUE;
      }
      else {
        return FALSE;
      }
      break;
    case 'view':
      return user_access('view ${2}', $account);
      break;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_access()</description>
  </snippet>
  <snippet id="hook-delete">
    <text><![CDATA[/**
 * Implementation of hook_action_delete().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_action_delete($aid) {
  $0
}]]></text>
    <tag>hook</tag>
    <description>hook_action_delete()</description>
  </snippet>
  <snippet id="hook-action-info">
    <text><![CDATA[/**
 * Implementation of hook_action_info().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_action_info() {
  return array(
    '${1:action_1}' => array(
      'description'   => t('${2:Action description}'),
      'type'          => '${3:type}',
      'configurable'  => ${4:[FALSE,TRUE]},
      'hooks'         => array(
        '${5:module}' => array('${6:operation}', '${7:operation}'),
      )
    ),
    '${11:action_2}' => array(
      'description'   => t('${12:Action description}'),
      'type'          => '${13:type}',
      'configurable'  => ${14:[FALSE,TRUE]},
      'hooks'         => array(
        '${15:module}' => array('${16:operation}', '${17:operation}'),
      )
    ),
  );
}]]></text>
    <tag>hook</tag>
    <description>hook_action_info()</description>
  </snippet>
  <snippet id="hook-action-info-alter">
    <text><![CDATA[/**
 * Implementation of hook_action_info_alter().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_action_info_alter(&$actions) {
  $0
}]]></text>
    <tag>hook</tag>
    <description>hook_action_info_alter()</description>
  </snippet>
  <snippet id="hook-block">
    <text><![CDATA[/**
 * Implementation of hook_block().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info'       => t('${1:Title of block #1}'),
        'cache'       => ${2:[BLOCK_CACHE_PER_ROLE,BLOCK_CACHE_PER_USER,BLOCK_CACHE_PER_PAGE,BLOCK_CACHE_GLOBAL,BLOCK_NO_CACHE]},
        'status'     => ${3:[TRUE,FALSE]},
        'weight'     => ${4:0},
        'region'     => '${5}',
        'visibility' => ${6:1},
        'pages'      => '${7}',
      );
      $blocks[1] = array(
        'info'       => t('${11:Title of block #2}'),
        'cache'       => ${12:[BLOCK_CACHE_PER_ROLE,BLOCK_CACHE_PER_USER,BLOCK_CACHE_PER_PAGE,BLOCK_CACHE_GLOBAL,BLOCK_NO_CACHE]},
        'status'     => ${13:[TRUE,FALSE]},
        'weight'     => ${14:0},
        'region'     => '${15}',
        'visibility' => ${16:1},
        'pages'      => '${17}',
      );
      return $blocks;
      break;

    case 'configure':
      $form = array();
      switch ($delta)  {
        case 0:
          # form code
          break;
        case 1:
          # form code
          break;
      }
      return $form;

    case 'save':
      switch ($delta)  {
        case 0:
          # form code
          break;
        case 1:
          # form code
          break;
      }
      break;

    case 'view': default:
      switch ($delta) {
        case 0:
          $block['subject'] = t('Title of block #1');
          $block['content'] = 'Content of block #1';
          break;
        case 1:
          $block['subject'] = t('Title of block #2');
          $block['content'] = 'Content of block #2';
          break;
      }
      return $block;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_block()</description>
  </snippet>
  <snippet id="hook-boot">
    <text><![CDATA[/**
 * Implementation of hook_boot().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_boot() {
  $0
}
]]></text>
    <tag>hook</tag>
    <description>hook_boot()</description>
  </snippet>
  <snippet id="hook-comment">
    <text><![CDATA[/**
 * Implementation of hook_comment().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_comment(&$a1, $op) {
  switch ($op) {
    case 'insert':
      // $a1 = $form_values
      break;
    case 'update':
      // $a1 = $form_values
      break;
    case 'view':
      // $a1 = $comment
      break;
    case 'validate':
      // $a1 = $form_values
      break;
    case 'publish':
      // $a1 = $comment
      break;
    case 'unpublish':
      // $a1 = $comment
      break;
    case 'delete':
      // $a1 = $comment
      break;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_comment()</description>
  </snippet>
  <snippet id="hook-cron">
    <text><![CDATA[/**
 * Implementation of hook_cron().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_cron() {
  $0
}]]></text>
    <tag>hook</tag>
    <description>hook_cron()</description>
  </snippet>
  <snippet id="hook-db-rewrite-sql">
    <text><![CDATA[/**
 * Implementation of hook_db_rewrite_sql().
 */
function hook_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  switch ($primary_field) {
    case '${1:nid}':
      // this query deals with node objects
      $return = array();
      if ($primary_table != 'n') {
        $return['join'] = "LEFT JOIN {node} n ON $primary_table.nid = n.nid";
      }
      $return['where'] = 'created >' . mktime(0, 0, 0, 1, 1, 2005);
      return $return;
      break;
    case '${1:tid}':
      // this query deals with taxonomy objects
      break;
    case '${1:vid}':
      // this query deals with vocabulary objects
      break;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_db_rewrite_sql()</description>
  </snippet>
  <snippet id="hook-delete">
    <text><![CDATA[/**
 * Implementation of hook_delete().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_delete(&$node) {
  db_query("DELETE FROM {${2:mytable}} WHERE nid = %d", $node->nid);
}]]></text>
    <tag>hook</tag>
    <description>hook_delete()</description>
  </snippet>
  <snippet id="hook-disable">
    <text><![CDATA[/**
 * Implementation of hook_disable().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_disable($query, $primary_table, $primary_field, $args) {
  $0
}]]></text>
    <tag>hook</tag>
    <description>hook_disable()</description>
  </snippet>
  <snippet id="hook-elements">
    <text><![CDATA[/**
 * Implementation of hook_elements().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_elements() {
  return array(
    '#input'            => ${1:[TRUE,FALSE]},
    '#process'          => array('${2:callbak_function}'),
    '#after_build'      => array('${3:callbak_function}'),
    '#validate'         => array('${4:callbak_function}'),
    '#element_validate' => array('${5:callbak_function}'),
    '#pre_render'       => array('${6:callbak_function}'),
    '#post_render'      => array('${7:callbak_function}'),
    '#submit'           => array('${8:callbak_function}'),
  );
}]]></text>
    <tag>hook</tag>
    <description>hook_elements()</description>
  </snippet>
  <snippet id="hook-enable">
    <text><![CDATA[/**
 * Implementation of hook_enable().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_enable() {
  $0
}]]></text>
    <tag>hook</tag>
    <description>hook_enable()</description>
  </snippet>
  <snippet id="hook-exit">
    <text><![CDATA[/**
 * Implementation of hook_exit().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_exit($destination = NULL) {
  $0
}]]></text>
    <tag>hook</tag>
    <description>hook_exit()</description>
  </snippet>
  <snippet id="hook-file-download">
    <text><![CDATA[/**
 * Implementation of hook_file_download().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_file_download($filepath) {
  $0
}]]></text>
    <tag>hook</tag>
    <description>hook_file_download()</description>
  </snippet>
  <snippet id="hook-filter">
    <text><![CDATA[/**
 * Implementation of hook_filter().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
  switch ($op) {
    case 'list':
      return array(0 => t('${2:filtername}'));
      break;
    case 'description':
      return t('${3:description}');
      break;
    case 'no cache':
      break;
    case 'prepare':
      // Do some change into $text
      return $text;
      break;
    case 'process':
      // Do some change into $text
      return $text;
      break;
    case 'settings':
      break;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_filter()</description>
  </snippet>
  <snippet id="hook-filter-tips">
    <text><![CDATA[/**
 * Implementation of hook_filter_tips().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_filter_tips($delta, $format, $long = FALSE) {
  return t("${1}");
}]]></text>
    <tag>hook</tag>
    <description>hook_filter_tips()</description>
  </snippet>
  <snippet id="hook-form-alter">
    <text><![CDATA[/**
 * Implementation of hook_form_alter().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    // Add configuration here
  }
  elseif (isset($form['type']) && isset($form['#node'])) {
    if ($form['type']['#value'] .'_node_form' == $form_id) {
      $node = $form['#node'];
      // Add node-form info here
    }
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_form_alter()</description>
  </snippet>
  <snippet id="hook-form">
    <text><![CDATA[/**
 * Implementation of hook_form().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  $form = array();

  // Build Form with FAPI
  ${0:#code}

  return $form;
}]]></text>
    <tag>hook</tag>
    <description>hook_form()</description>
  </snippet>
  <snippet id="hook-form-formid-alter">
    <text><![CDATA[/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_form_${1:FORM_ID}_alter(&$form, &$form_state) {
  ${0:#code}
}]]></text>
    <tag>hook</tag>
    <description>hook_form_FORM_ID_alter()</description>
  </snippet>
  <snippet id="hook-forms">
    <text><![CDATA[/**
 * Implementation of hook_forms().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_forms() {
  $forms['${1}_first_form'] = array(
    'callback' => '${1)_first_form_builder}',
    'callback arguments' => array('${2:some parameter}'),
  );
  $forms['${1}_second_form'] = array(
    'callback' => '${1)_second_form_builder}',
    'callback arguments' => array('${3:some parameter}'),
  );
  return $forms;
}
]]></text>
    <tag>hook</tag>
    <description>hook_forms()</description>
  </snippet>
  <snippet id="hook-help">
    <text><![CDATA[/**
 * Implementation of hook_help().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_help($path, $arg) {
  switch ($path) {
    case 'admin/help#${1}':
      return t('${1}');
    case 'user/help#${1}':
      return t('${2}');
  }
}
]]></text>
    <tag>hook</tag>
    <description>hook_help()</description>
  </snippet>
  <snippet id="hook-insert">
    <text><![CDATA[/**
 * Implementation of hook_insert().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_insert($node) {
  $data = new stdClass();
  
  drupal_write_record('${2:mytable}', $data);
  
  if (db_affected_rows()) {
    // Insert not occured
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_insert()</description>
  </snippet>
  <snippet id="hook-install">
    <text><![CDATA[/**
 * Implementation of hook_install().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_install() {
  // Install tables
  drupal_install_schema('${1}');
}]]></text>
    <tag>hook</tag>
    <description>hook_install()</description>
  </snippet>
  <snippet id="hook-link">
    <text><![CDATA[/**
 * Implementation of hook_link().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_link($type, $object, $teaser = FALSE) {
  $links = array();

   $links['${2:linkname}'] = array(
    'title'      => t('${3:Title of link #1}'),
    'href'       => '${4:link/path}',
    'query'      => '',  
    'fragment'   => '',
    'attributes' => array(
      'title' => t('${5:link description}'),
      'class' => '',
    ),
    'html'       => [FALSE,TRUE],
  );

  return $links;
}
]]></text>
    <tag>hook</tag>
    <description>hook_link()</description>
  </snippet>
  <snippet id="hook-load">
    <text><![CDATA[/**
 * Implementation of hook_load().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {${1}} WHERE nid = %d', $node->nid));
  return $additions;
}]]></text>
    <tag>hook</tag>
    <description>hook_load()</description>
  </snippet>
  <snippet id="hook-mail">
    <text><![CDATA[/**
 * Implementation of hook_mail().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_mail($key, &$message, $params) {
  $message['id']      = '${1:mail id}';
  $message['to']      = '${2:email@address.loc}';
  $message['subject'] = '${3:Mail subject}';
  $message['body']    = '${4:Mail body}';
  $message['from']    = '${5:from@address.loc}';
  $message['headers'] =  array(
    '${6:header-type}' => '${7:header-value}'
  );
}]]></text>
    <tag>hook</tag>
    <description>hook_mail()</description>
  </snippet>
  <snippet id="hook-mail-alter">
    <text><![CDATA[/**
 * Implementation of hook_mail_alter().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_mail_alter(&$message) {
  $message['id']       = '${1:mail id}';
  $message['to']       = '${2:email@address.loc}';
  $message['subject']  = '${3:Mail subject}';
  $message['body']     = '${4:Mail body}';
  $message['from']     = '${5:from@address.loc}';
  $message['headers']  =  array(
    '${6:header-type}' => '${7:header-value}'
  );
  $message['params']   =  array('${8:param}');
  $message['language'] = '${9:from@address.loc}';
}]]></text>
    <tag>hook</tag>
    <description>hook_mail_alter()</description>
  </snippet>
  <snippet id="hook-menu">
    <text><![CDATA[/**
 * Implementation of hook_menu().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_menu() {
  $items = array();
  
  $items['${1:path/1}'] = array(
    'title'            => '${2:title}',
    'description'      => '${3:description}',
    'page callback'    => '${4:drupal_get_form}',
    'page arguments'   => array(${5:''}),
    'access callback'  => '${6}',
    'access arguments' => array(${7:''}),
    'weight'           => ${8:0},
    'menu_name'        => '${9:Navigation}',
    'type'             => ${10:[BLOCK_CACHE_PER_ROLE,BLOCK_CACHE_PER_USER,BLOCK_CACHE_PER_PAGE,BLOCK_CACHE_GLOBAL,BLOCK_NO_CACHE]},
  );
  
  $items['${11:path/1}'] = array(
    'title'            => '${12:title}',
    'description'      => '${13:description}',
    'page callback'    => '${14:drupal_get_form}',
    'page arguments'   => array(${15:''}),
    'access callback'  => '${16}',
    'access arguments' => array(${17:''}),
    'weight'           => ${18:0},
    'menu_name'        => '${19:Navigation}',
    'type'             => ${20:[BLOCK_CACHE_PER_ROLE,BLOCK_CACHE_PER_USER,BLOCK_CACHE_PER_PAGE,BLOCK_CACHE_GLOBAL,BLOCK_NO_CACHE]},
  );
  
  return $items;
}]]></text>
    <tag>hook</tag>
    <description>hook_menu()</description>
  </snippet>
  <snippet id="hook-menu-alter">
    <text><![CDATA[/**
 * Implementation of hook_menu_alter().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_menu_alter(&$items) {
  $items['${1:path/1}'] = array(
    'title'            => '${2:title}',
    'description'      => '${3:description}',
    'page callback'    => '${4:drupal_get_form}',
    'page arguments'   => array(${5:''}),
    'access callback'  => '${6}',
    'access arguments' => array(${7:''}),
    'weight'           => ${8:0},
    'menu_name'        => '${9:Navigation}',
    'type'             => ${10:[BLOCK_CACHE_PER_ROLE,BLOCK_CACHE_PER_USER,BLOCK_CACHE_PER_PAGE,BLOCK_CACHE_GLOBAL,BLOCK_NO_CACHE]},
  );
}]]></text>
    <tag>hook</tag>
    <description>hook_menu_alter()</description>
  </snippet>
  <snippet id="menu-item">
    <text><![CDATA[
$items['${1:path/1}'] = array(
  'title'            => '${2:title}',
  'description'      => '${3:description}',
  'page callback'    => '${4:drupal_get_form}',
  'page arguments'   => array(${5:''}),
  'access callback'  => '${6}',
  'access arguments' => array(${7:''}),
  'weight'           => ${8:0},
  'menu_name'        => '${9:Navigation}',
  'type'             => ${10:[BLOCK_CACHE_PER_ROLE,BLOCK_CACHE_PER_USER,BLOCK_CACHE_PER_PAGE,BLOCK_CACHE_GLOBAL,BLOCK_NO_CACHE]},
);]]></text>
    <tag>menu</tag>
    <description>Menu item</description>
  </snippet>
  <snippet id="hook-nodeapi">
    <text><![CDATA[/**
 * Implementation of hook_nodeapi().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'alter':
      # code...
      break;
    case 'delete':
      # code...
      break;
    case 'delete revision':
      # code...
      break;
    case 'insert':
      # code...
      break;
    case 'load':
      # code...
      break;
    case 'prepare':
      # code...
      break;
    case 'prepare translation':
      # code...
      break;
    case 'print':
      # code...
      break;
    case 'rss item':
      # code...
      break;
    case 'search result':
      # code...
      break;
    case 'presave':
      # code...
      break;
    case 'update':
      # code...
      break;
    case 'update index':
      # code...
      break;
    case 'validate':
      # code...
      break;
    case 'view':
      # code...
      break;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_nodeapi()</description>
  </snippet>
  <snippet id="hook-node-garants">
    <text><![CDATA[/**
 * Implementation of hook_node_grants().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_node_grants($account, $op) {
  return TRUE;
}]]></text>
    <tag>hook</tag>
    <description>hook_node_garant()</description>
  </snippet>
  <snippet id="hook-node-info">
    <text><![CDATA[/**
 * Implementation of hook_node_info().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_node_info() {
  return array(
    '${1}' => array(
      'name'        => t('${1:Node name}'),
      'module'      => '${1}',
      'description' => t("${2:Node description}"),
      'has_title'   => ${3:[TRUE,FALSE]},
      'title_label' => t('${4:Title}'),
      'has_body'    => ${5:[TRUE,FALSE]},
      'body_label'  => t('${6:Body}'),
    ),
  );
}]]></text>
    <tag>hook</tag>
    <description>hook_node_info()</description>
  </snippet>
  <snippet id="hook-perm">
    <text><![CDATA[/**
 * Implementation of hook_perm().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_perm() {
  return array(
    'create ${2:mycontent}',
    'edit ${2}',
    'edit own ${2}',
    'delete ${2}',
    'view ${2}',
  );
}]]></text>
    <tag>hook</tag>
    <description>hook_perm()</description>
  </snippet>
  <snippet id="hook-schema">
    <text><![CDATA[/**
 * Implementation of hook_schema().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_schema() {
  $schema['${1}'] = array(
    'description' => t('${2:description}'),
    'fields' => array(
      '${3}' => array(
        'description' => t('${4}'),
        'type'        => '${5:serial}',
        'unsigned'    => ${6:[TRUE,FALSE]},
        'not null'    => ${7:[TRUE,FALSE]},
      ),
      '${13}' => array(
        'description' => t('${14}'),
        'type'        => '${15:int}',
        'unsigned'    => ${16:[TRUE,FALSE]},
        'not null'    => ${17:[TRUE,FALSE]},
        'default'     => ${18:0},
      ),
      '${23}' => array(
        'description' => t('${24}'),
        'type'        => '${25:varchar}',
        'length'      => ${26:32},
        'not null'    => ${27:[TRUE,FALSE]},
        'default'     => '${28}',
      ),
    ),
    'primary key'     => array('${30}'),
  );
  return $schema;
}
]]></text>
    <tag>hook</tag>
    <description>hook_schema()</description>
  </snippet>
  <snippet id="hook-search">
    <text><![CDATA[/**
 * Implementation of hook_search().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_search($op = 'search', $keys = null) {
  switch ($op) {
    case 'name':
      # code...
      return t('${2:Content}');
      break;
    case 'reset':
      # code...
      break;
    case 'search':
      // Do operation for extract info
      $results[] = array(
        'link'      => url(''),
        'type'      => check_plain(''),
        'title'     => '',
        'user'      => '',
        'date'      => '',
        'node'      => $node,
        'extra'     => $extra,
        'score'     => $score / $total,
        'snippet'   => '',
      );
      return $results;
      break;
    case 'status':
      return array(
        'remaining' => $remaining,
        'total'     => $total
      );
      break;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_search()</description>
  </snippet>
  <snippet id="hook-taxonomy">
    <text><![CDATA[/**
 * Implementation of hook_taxonomy().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_taxonomy($op, $type, $array = NULL) {
  switch ($type) {
    // Term operation
    case 'term':
      switch ($op) {
        case 'delete':
          break;
        case 'insert':
          return t('${3:description}');
          break;
        case 'update':
          break;
      }
      break;

    // Vocabulary operation
    case 'vocabulary':
      switch ($op) {
        case 'delete':
          break;
        case 'insert':
          return t('${4:description}');
          break;
        case 'update':
          break;
      }
      break;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_taxonomy()</description>
  </snippet>
  <snippet id="hook-theme">
    <text><![CDATA[/**
 * Implementation of hook_theme().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_theme($existing, $type, $theme, $path) {
   return array(
    '${2:theme_name_a}' => array(
      'arguments'     => array('' => NULL),
      'file'          => '',
      'path'          => ,
      'template'      => ,
      'function'      => ,
      'pattern'       => ,
      'preprocess functions' => ,
      'override preprocess functions' => ,
      'type'          => ,
      'theme path'    => ,
      'theme paths'   => ,
    ),
    '${3:theme_name_b}' => array(
      'arguments'     => array('' => NULL),
      'file'          => '',
      'path'          => ,
      'template'      => ,
      'function'      => ,
      'pattern'       => ,
      'preprocess functions' => ,
      'override preprocess functions' => ,
      'type'          => ,
      'theme path'    => ,
      'theme paths'   => ,
    ),
  );
}]]></text>
    <tag>hook</tag>
    <description>hook_theme()</description>
  </snippet>
  <snippet id="hook-uninstall">
    <text><![CDATA[/**
 * Implementation of hook_uninstall().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_uninstall() {
  // Remove tables
  drupal_uninstall_schema('${1}');
  
  // Remove all variable into table
  $result = db_query('SELECT name FROM {variable} WHERE name LIKE "${1}_%"');
  while ($row = db_fetch_object($result)) {
    variable_del($row->name);
  }
}
]]></text>
    <tag>hook</tag>
    <description>hook_uninstall()</description>
  </snippet>
  <snippet id="hook-update">
    <text><![CDATA[/**
 * Implementation of hook_update().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_update($node) {
  $data = new stdClass();
  
  drupal_write_record('${2:mytable}', $data, array('${3:key}'));
  
  if (db_affected_rows()) {
    // update not occured
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_update()</description>
  </snippet>
  <snippet id="hook-update-n">
    <text><![CDATA[/**
 * Implementation of hook_update_N().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_update_${2:N}() {
  $ret = array();
  db_add_field($ret, '${1}', '', array('type' => 'int', 'not null' => [TRUE,FALSE]));
  return $ret;
}]]></text>
    <tag>hook</tag>
    <description>hook_update_N()</description>
  </snippet>
  <snippet id="hook-user">
    <text><![CDATA[/**
 * Implementation of hook_user().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'after_update':
      # code...
      break;
    case 'categories':
      $categories[] = array(
        'name'   => '',
        'title'  => t(''),
        'weight' => 0,
      );
      return $categories;
    case 'delete':
      # code...
      break;
    case 'form':
      $form = array();
      # code...
      return $form;
      break;
    case 'insert':
      # code...
      break;
    case 'load':
      # code...
      break;
    case 'login':
      # code...
      break;
    case 'logout':
      # code...
      break;
    case 'register':
      # code...
      break;
    case 'submit':
      # code...
      break;
    case 'update':
      # code...
      break;
    case 'validate':
      # code...
      break;
    case 'view':
      # code...
      break;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_user()</description>
  </snippet>
  <snippet id="hook-validate">
    <text><![CDATA[/**
 * Implementation of hook_validate().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_validate($node, &$form) {
  if (${2:FALSE}) {
    form_set_error('${3:form_element}', t('${4:Error message}.'));
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_validate()</description>
  </snippet>
  <snippet id="hook-view">
    <text><![CDATA[/**
 * Implementation of hook_view().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['${1}'] = array(
    '#value' => '${2:test}',
    '#weight' => ${3:1},
  );

  return $node;
}]]></text>
    <tag>hook</tag>
    <description>hook_view()</description>
  </snippet>
  <snippet id="hook-footer">
    <text><![CDATA[/**
 * Implementation of hook_footer().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_footer($main = 0) {
  $output = '';

  ${0}

  return $output;
}]]></text>
    <tag>hook</tag>
    <description>hook_footer()</description>
  </snippet>

  <!-- File structure -->
  <snippet id="info">
    <text><![CDATA[; $$(echo 'I')d$
name = ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}
description = ${2:Module description}
package = ${3:package}
version = ${4:1.0}
core = ${5:6.x}]]></text>
    <tag>info_init</tag>
    <description>info</description>
  </snippet>
  <snippet id="install">
    <text><![CDATA[<?php // $$(echo 'I')d$
/**
 * Module:      ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}
 * Date:        $(date +%Y-%m-%d%t%k:%M)
 * Author:      $(whoami)
 *
 * License:
 *   ${1}
 *   Copyright (C) $(date +%Y)  $(whoami)
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.pro See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * Implementation of hook_install().
 */
function ${1}_install() {
  // Install tables
  drupal_install_schema('${1}');
}

/**
 * Implementation of hook_uninstall().
 */
function ${1}_uninstall() {
  // Remove tables
  drupal_uninstall_schema('${1}');
  
  // Remove all variable into table
  $result = db_query('SELECT name FROM {variable} WHERE name LIKE "${1}_%"');
  while ($row = db_fetch_object($result)) {
    variable_del($row->name);
  }
}

/**
 * Implementation of hook_schema().
 */
function ${1}_schema() {
  $schema['${1}'] = array(
    'description' => t('${2:description}'),
    'fields' => array(
      '${3}' => array(
        'description' => t('${4}'),
        'type'        => '${5:serial}',
        'unsigned'    => ${6:TRUE},
        'not null'    => ${7:TRUE},
      ),
      '${13}' => array(
        'description' => t('${14}'),
        'type'        => '${15:int}',
        'unsigned'    => ${16:TRUE},
        'not null'    => ${17:TRUE},
        'default'     => ${18:0},
      ),
      '${23}' => array(
        'description' => t('${24}'),
        'type'        => '${25:varchar}',
        'length'      => ${26:32},
        'not null'    => ${27:TRUE},
        'default'     => '${28}',
      ),
    ),
    'primary key'     => array('${3}'),
  );
  return $schema;
}
]]></text>
    <tag>install_init</tag>
    <description>install</description>
  </snippet>
  <snippet id="module">
    <text><![CDATA[<?php // $$(echo 'I')d$
/**
 * Module:      ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}
 * Date:        $(date +%Y-%m-%d%t%k:%M)
 * Author:      $(whoami)
 *
 * Description:
 *   ${2:description}
 *
 * License:
 *   
 *   Copyright (C) $(date +%Y)  $(whoami)
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.pro See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

${0}]]></text>
    <tag>module_init</tag>
    <description>module</description>
  </snippet>

  <!-- Views -->
  <snippet id="views-field">
    <text><![CDATA[// ===========================================================================
// Fields ${21} of table
$data['${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}']['${21:field}'] = array(
  'title'  => t('${22:Field name}'),
  'help'   => t('${23:Field description}'), 
  
  'field'  => array(
    'handler'        => '${24:views_handler_field}',
    'click sortable' => ${25:[TRUE,FALSE]},
  ),
  // Information for accepting a name as a filter
  'filter' => array(
    'handler'        => '${26:views_handler_filter}',
  ),
  // Information for sorting on a name.
  'sort'   => array(
    'handler'        => '${27:views_handler_sort}',
  ),
);]]></text>
    <tag>views</tag>
    <description>field</description>
  </snippet>
  <snippet id="views-views-api">
    <text><![CDATA[/**
 * Implementation of hook_views_api.
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_views_api() {
  return array('api' => 2);
}]]></text>
    <tag>views</tag>
    <description>hook_views_api()</description>
  </snippet>
  <snippet id="views-views-data">
    <text><![CDATA[/**
 * Implementation of hook_views_data()
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_views_data() {
  // ===========================================================================
  // Generic info
  $data['${1}']['table']['group']  = t('${1:Table group}');

  $data['${1}']['table']['base'] = array(
    'field'  => '${5:id}', // Primary key of table
    'title'  => t('${6:Table name}'),
    'help'   => t('${7:Table information, this appair into GUI to help users.}'),
    'weight' => ${8:-10},
  );
  
  // ===========================================================================
  // Table join
  $data['${1}']['table']['join'] = array(
    '${10:table_to_join}' => array(
      'left_field' => '${11:id}',
      'field'      => '${12:id}',
    ),
  );
  
  // ===========================================================================
  // Fields ${21} of table
  $data['${1}']['${21:field}'] = array(
    'title'  => t('${22:Field name}'),
    'help'   => t('${23:Field description}'),
    'field'  => array(
      'handler'        => '${24:views_handler_field}',
      'click sortable' => ${25:[TRUE,FALSE]},
    ),
    // Information for accepting a name as a filter
    'filter' => array(
      'handler'        => '${26:views_handler_filter}',
    ),
    // Information for sorting on a name.
    'sort'   => array(
      'handler'        => '${27:views_handler_sort}',
    ),
  );
  
  return $data;
}]]></text>
    <tag>views</tag>
    <description>hook_views_data()</description>
  </snippet>
  <snippet id="views-views-handler">
    <text><![CDATA[/**
 * Implementation of hook_views_handlers().
 */
function ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_views_handlers() {
  return array(
    'info' => array(
      'path' => drupal_get_path('module', '${1}'),
    ),
    'handlers' => array(
      // field handlers
      '${1}_handler_field_${2:field-name}' => array(
        'parent' => '${3:views_handler_field}',
      ),
    )
  );
}]]></text>
    <tag>views</tag>
    <description>hook_views_handler()</description>
  </snippet>
  <snippet id="views-field-handler">
    <text><![CDATA[/**
 * Field handler.
 */
class ${1:$GEDIT_CURRENT_DOCUMENT_NAME/((?P<name>.+?)\.(?P<ext>.+?))|/(?<name>,\<name>,modulename)}_handler_field_${5:field-type} extends views_handler_field {
  /**
   * Override init function to provide generic option
   */
  function init(&$view, &$data) {
    parent::init($view, $data);
    if (!empty($this->options['${10:option_key}'])) {
      $this->additional_fields['${11:field}'] = '${11}';
    }
  }

  function option_definition() {
    $options = parent::option_definition();
    $options['${10}'] = array('default' => [TRUE,FALSE]);
    return $options;
  }
  
  function options_form(&$form, &$form_state) {
    parent::options_form($form, $form_state);
    // Add other form field to option with FAPI
    $form['${10}'] = array(
      '#type'          => 'checkbox',
      '#title'         => t('${15:Title}'),
      '#description'   => t('${16:Description}'),
      '#weight'        => ${17:5},
      '#default_value' => $this->options['${10}'],
    );
  }
  
  function render($values) {
    // Generate output for $values->{$this->field_alias}
    return $values->{$this->field_alias};
  }
}]]></text>
    <tag>views</tag>
    <description>field handler</description>
  </snippet>
</snippets>
