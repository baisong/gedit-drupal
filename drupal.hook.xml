<?xml version='1.0' encoding='utf-8'?>
<snippets language="drupal">
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_access().
 */
function $<return module_name>_access($op, $node, $account) {
	switch ($op) {
		case 'create':
			return user_access('create ${2:my content type}', $account);
			break;
		case 'delete':
		  if ((user_access('edit own ${2}', $account) && ($account->uid == $node->uid)) || (user_access('delete ${2}', $account)) {
		    return TRUE;
		  } else {
				return FALSE;
			}
			break;
		case 'update':
		  if ((user_access('edit own ${2}', $account) && ($account->uid == $node->uid)) || (user_access('edit ${2}', $account)) {
		    return TRUE;
		  } else {
				return FALSE;
			}
			break;
		case 'view':
			return user_access('view ${2}', $account);
			break;
	}
}]]></text>
    <tag>hook</tag>
    <description>hook_access()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_block().
 */
function $<return module_name>_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
			$blocks[0] = array(
        'info'       => t('Title of block #1'),
				'cache'			 => BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_USER | BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_GLOBAL | BLOCK_NO_CACHE,
        'status'     => TRUE,
        'weight'     => 0,
				'region'		 => '',
        'visibility' => 1,
        'pages'      => '',
      );
			$blocks[1] = array(
        'info'       => t('Title of block #2'),
				'cache'			 => BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_USER | BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_GLOBAL | BLOCK_NO_CACHE,
        'status'     => TRUE,
        'weight'     => 0,
				'region'		 => '',
        'visibility' => 1,
        'pages'      => '',
      );
      return $blocks;
			break;

    case 'configure':
      $form = array();
			switch ($delta)	{
				case 0:
					# form code
					break;
				case 1:
					# form code
					break;
			}
      return $form;

    case 'save':
			switch ($delta)	{
				case 0:
					# form code
					break;
				case 1:
					# form code
					break;
			}
			break;

    case 'view': default:
      switch ($delta) {
        case 0:
          $block['subject'] = t('Title of block #1');
          $block['content'] = 'Content of block #1';
          break;
        case 1:
          $block['subject'] = t('Title of block #2');
          $block['content'] = 'Content of block #2';
          break;
      }
      return $block;
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_block()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_comment().
 */
function $<return module_name>_comment(&$a1, $op) {
	switch ($op) {
		case 'insert':
			// $a1 = $form_values
			break;
		case 'update':
			// $a1 = $form_values
			break;
		case 'view':
			// $a1 = $comment
			break;
		case 'validate':
			// $a1 = $form_values
			break;
		case 'publish':
			// $a1 = $comment
			break;
		case 'unpublish':
			// $a1 = $comment
			break;
		case 'delete':
			// $a1 = $comment
			break;
	}
}]]></text>
    <tag>hook</tag>
    <description>hook_comment</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_cron().
 */
function $<return module_name>_cron() {
	$0
}]]></text>
    <tag>hook</tag>
    <description>hook_cron()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_delete().
 */
function $<return module_name>_delete(&$node) {
	db_query("DELETE FROM {${2:mytable}} WHERE nid = %d", $node->nid);
}]]></text>
    <tag>hook</tag>
    <description>hook_delete()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_filter().
 */
function $<return module_name>_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
	switch ($op) {
		case 'list':
      return array(0 => t('${2:filtername}'));
			break;
		case 'description':
      return t('${3:description}');
			break;
		case 'no cache':
			break;
		case 'prepare':
			// Do some change into $text
			return $text;
			break;
		case 'process':
			// Do some change into $text
			return $text;
			break;
		case 'settings':
			break;
	}
}]]></text>
    <tag>hook</tag>
    <description>hook_filter</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_form_alter().
 */
function $<return module_name>_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && $form['type']['#value'] .'${2:_node_settings}' == $form_id) {
		// Change or add some element into $form
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_form_alter()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_form().
 */
function $<return module_name>_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  $form = array();

	// Build Form with FAPI
	$0

  return $form;
}]]></text>
    <tag>hook</tag>
    <description>hook_form()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_help().
 */
function $<return module_name>_help($path, $arg) {
  switch ($path) {
    case 'admin/help#$<return module_name>':
      return t('');
    case 'user/help#$<return module_name>':
      return t('');
  }
}
]]></text>
    <tag>hook</tag>
    <description>hook_help()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_insert().
 */
function $<return module_name>_insert($node) {
	db_query("INSERT INTO {${2:mytable}} 
					 		('nid', 'extra')
						VALUES
							(%d, %d)",
						$node->nid, $node->extra
					);
}]]></text>
    <tag>hook</tag>
    <description>hook_insert()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_install().
 */
function $<return module_name>_install() {
  drupal_install_schema('${1}');
}]]></text>
    <tag>hook</tag>
    <description>hook_install()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_link().
 */
function $<return module_name>_link($type, $object, $teaser = FALSE) {
	$links = array();

	 $links['${2:linkname}'] = array(
    'title' => t('${3:Title of link #1}'),
    'href' => '${4:link/path}',
    'query' => '',	
    'fragment' => '',
    'attributes' => array(
			'title' => t('${5:link description}'),
			'class' => '',
		),
		'html' => FALSE,
  );

	return $links;
}
]]></text>
    <tag>hook</tag>
    <description>hook_link()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_menu().
 */
function $<return module_name>_menu() {
  $items = array();

  $items[${2:'path/1'}] = array(
    'title' => '',
		'description' => ,
    'page callback' => '',
    'page arguments' => '',
    'access callback' => array(''),
    'access arguments' => array(''),
		'weight' => 0,
		'menu_name' => 'Navigation',
    'type' => MENU_NORMAL_ITEM | MENU_CALLBACK | MENU_SUGGESTED_ITEM | MENU_LOCAL_TASK | MENU_DEFAULT_LOCAL_TASK,
  );

  $items[${3:'path/2'}] = array(
    'title' => '',
		'description' => ,
    'page callback' => '',
    'page arguments' => '',
    'access callback' => array(''),
    'access arguments' => array(''),
		'weight' => 0,
		'menu_name' => 'Navigation',
    'type' => MENU_NORMAL_ITEM | MENU_CALLBACK | MENU_SUGGESTED_ITEM | MENU_LOCAL_TASK | MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}]]></text>
    <tag>hook</tag>
    <description>hook_menu()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_nodeapi().
 */
function $<return module_name>_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	switch ($op) {
		case 'alter':
			# code...
			break;
		case 'delete':
			# code...
			break;
		case 'delete revision':
			# code...
			break;
		case 'insert':
			# code...
			break;
		case 'load':
			# code...
			break;
		case 'prepare':
			# code...
			break;
		case 'prepare translation':
			# code...
			break;
		case 'print':
			# code...
			break;
		case 'rss item':
			# code...
			break;
		case 'search result':
			# code...
			break;
		case 'presave':
			# code...
			break;
		case 'update':
			# code...
			break;
		case 'update index':
			# code...
			break;
		case 'validate':
			# code...
			break;
		case 'view':
			# code...
			break;
	}
}]]></text>
    <tag>hook</tag>
    <description>hook_nodeapi()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_perm().
 */
function $<return module_name>_perm() {
	return array(
		'create ${2:mycontent}',
		'edit ${2}',
		'edit own ${2}',
		'delete ${2}',
		'view ${2}',
	);
}]]></text>
    <tag>hook</tag>
    <description>hook_perm()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_schema().
 */
function $<return module_name>_schema() {
  $schema['$<return module_name>'] = array(
    'description' => t('${2:description}'),
    'fields' => array(
      '' => array(
        'description' => t(''),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
			),
      '' => array(
        'description' => t(''),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
			),
      '' => array(
        'description' => t(''),
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => ''
			),
    'primary key' => array(''),
  );
  return $schema;
}
]]></text>
    <tag>hook</tag>
    <description>hook_schema()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_search().
 */
function $<return module_name>_search($op = 'search', $keys = null) {
	switch ($op) {
		case 'name':
			# code...
			return t('${2:Content}');
			break;
		case 'reset':
			# code...
			break;
		case 'search':
			// Do operation for extract info
      $results[] = array(
        'link' => url(''),
        'type' => check_plain(''),
        'title' => '',
        'user' => '',
        'date' => '',
        'node' => $node,
        'extra' => $extra,
        'score' => $score / $total,
        'snippet' => '',
      );
			return $results;
			break;
		case 'status':
      return array(
				'remaining' => $remaining,
				'total' => $total
			);
			break;
	}
}]]></text>
    <tag>hook</tag>
    <description>hook_search()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_taxonomy().
 */
function $<return module_name>_filter($op, $type, $array = NULL) {
	switch ($type) {
		// Term operation
		case 'term':
			switch ($op) {
				case 'delete':
					break;
				case 'insert':
				  return t('${3:description}');
					break;
				case 'update':
					break;
			}
			break;

		// Vocabulary operation
		case 'vocabulary':
			switch ($op) {
				case 'delete':
					break;
				case 'insert':
				  return t('${3:description}');
					break;
				case 'update':
					break;
			}
			break;
	}
}]]></text>
    <tag>hook</tag>
    <description>hook_taxonomy()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_theme().
 */
function $<return module_name>_theme($existing, $type, $theme, $path) {
	 return array(
    '${2:theme_name_a}' => array(
      'arguments' => array('' => NULL),
			'file' => '',
			'path' => ,
			'template' => ,
			'function' => ,
			'pattern' => ,
			'preprocess functions' => ,
			'override preprocess functions' => ,
			'type' => ,
			'theme path' => ,
			'theme paths' => ,
    ),
    '${3:theme_name_b}' => array(
      'arguments' => array('' => NULL),
			'file' => '',
			'path' => ,
			'template' => ,
			'function' => ,
			'pattern' => ,
			'preprocess functions' => ,
			'override preprocess functions' => ,
			'type' => ,
			'theme path' => ,
			'theme paths' => ,
    ),
  );
}]]></text>
    <tag>hook</tag>
    <description>hook_theme()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_uninstall().
 */
function $<return module_name>_uninstall() {
  drupal_uninstall_schema('${1}');
  $result = db_query('SELECT name FROM {variable} WHERE name LIKE "${1}_%"');
	while ($row = db_fetch_object($result)) {
		variable_del($row->name);
	}
}
]]></text>
    <tag>hook</tag>
    <description>hook_uninstall()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_update().
 */
function $<return module_name>_update($node) {
	db_query("UPDATE {${2:mytable}} 
					 	SET
							'extra' = %d
						WHERE
							nid = %d",
						$node->extra, $node->nid
					);
}]]></text>
    <tag>hook</tag>
    <description>hook_update()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_update_N().
 */
function $<return module_name>_update_${2:N}() {
  $ret = array();
  db_add_field($ret, '${1}', '', array('type' => 'int', 'not null' => TRUE));
  return $ret;
}]]></text>
    <tag>hook</tag>
    <description>hook_update_N()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_user().
 */
function $<return module_name>_user($op, &$edit, &$account, $category = NULL) {
	switch ($op) {
		case 'after_update':
			# code...
			break;
		case 'categories':
			$categories = array(
				'name' => t(''),
				'title' => t(''),
				'weight' => 0,
			);
			return $categories;
			# code...
			break;
		case 'delete':
			# code...
			break;
		case 'form':
			$form = array();
			# code...
			return $form;
			break;
		case 'insert':
			# code...
			break;
		case 'load':
			# code...
			break;
		case 'login':
			# code...
			break;
		case 'logout':
			# code...
			break;
		case 'register':
			# code...
			break;
		case 'submit':
			# code...
			break;
		case 'update':
			# code...
			break;
		case 'validate':
			# code...
			break;
		case 'view':
			# code...
			break;
	}
}]]></text>
    <tag>hook</tag>
    <description>hook_user()</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<
# Define global variable
global module_name

####### Module name ##########
# Check if current file is empty
if $GEDIT_BASENAME != '' :
	# extract fil name (no extension)
	module_name = $GEDIT_BASENAME.split('.')[0].lower()
else:
	# Default module name
	module_name = 'mymodule'

>/**
 * Implementation of hook_validate().
 */
function $<return module_name>_validate($node, &$form) {
	if(${2:false}) {
		form_set_error('${3:form_element}', t('${4:Error message}.'));
  }
}]]></text>
    <tag>hook</tag>
    <description>hook_validate()</description>
  </snippet>
</snippets>
